/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.kt

import kotlinx.coroutines.*
import kotlinx.coroutines.channels.*

fun main() = runBlocking { // this: CoroutineScope
    val intStream = Channel<Int>()
    launch {
        println("streaming in to channel")
        for (i in 1..16) intStream.send(i)
        intStream.close()
    }

    // Creates a coroutine scope
    coroutineScope {
           launch {
               val tumblingWindow = WindowFunctions.createTumbling(3, { it: List<Int> -> println(it.sum()) })
               intStream.consumeEach {
                   tumblingWindow.processData(it)
               }
           }
    }
    
    // This line is not printed until the nested launch completes
    println("Coroutine scope is over")
}
